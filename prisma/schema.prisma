generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model charateristics {
  id         Int       @id @default(autoincrement())
  product_id Int?
  name       String?   @db.VarChar(255)
  value      String?   @db.VarChar(255)
  created_at DateTime  @default(now()) @db.Timestamp(0)
  products   products? @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "charateristics_ibfk_1")

  @@index([product_id], map: "product_id")
}

model departments {
  id          Int        @id @default(autoincrement())
  name        String?    @db.VarChar(255)
  description String?    @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(0)
  products    products[]
}

model depots {
  id                            Int            @id @default(autoincrement())
  product_id                    Int?
  warehouse_id                  Int?
  inserted_by_id                Int?
  product_total_units           Int?
  product_total_remaining_units Int?
  created_at                    DateTime       @default(now()) @db.Timestamp(0)
  warehouses                    warehouses?    @relation(fields: [warehouse_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "depots_ibfk_1")
  products                      products?      @relation(fields: [warehouse_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "depots_ibfk_2")
  store_depots                  store_depots[]

  @@index([warehouse_id], map: "warehouse_id")
}

model products {
  id             Int              @id @default(autoincrement())
  department_id  Int?
  owner_id       Int?
  name           String?          @db.VarChar(255)
  description    String?          @db.VarChar(255)
  image          String?          @db.VarChar(255)
  buy_price      Float?
  created_at     DateTime         @default(now()) @db.Timestamp(0)
  charateristics charateristics[]
  depots         depots[]
  departments    departments?     @relation(fields: [department_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "products_ibfk_1")

  @@index([department_id], map: "department_id")
}

model products_sell {
  id                      Int           @id @default(autoincrement())
  store_depot_id          Int?
  units_quantity          Int?
  unit_buy_price          Float?
  total_price             Float?
  payment_method          String?       @db.VarChar(255)
  units_returned_quantity Int?
  units_returned_at       DateTime      @default(now()) @db.Timestamp(0)
  created_at              DateTime      @default(now()) @db.Timestamp(0)
  store_depots            store_depots? @relation(fields: [store_depot_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "products_sell_ibfk_1")

  @@index([store_depot_id], map: "store_depot_id")
}

model roles {
  id          Int      @id @default(autoincrement())
  name        String?  @unique(map: "name") @db.VarChar(255)
  description String?  @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(0)
  users       users[]
}

model sell_price_history {
  id             Int           @id @default(autoincrement())
  store_depot_id Int?
  sell_price     Float?
  created_at     DateTime      @default(now()) @db.Timestamp(0)
  store_depots   store_depots? @relation(fields: [store_depot_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "sell_price_history_ibfk_1")

  @@index([store_depot_id], map: "store_depot_id")
}

model store_depots {
  id                       Int                  @id @default(autoincrement())
  store_id                 Int?
  depot_id                 Int?
  product_units            Int?
  product_remaining_units  Int?
  seller_profit_percentage Float?               @db.Float
  created_at               DateTime             @default(now()) @db.Timestamp(0)
  products_sell            products_sell[]
  sell_price_history       sell_price_history[]
  stores                   stores?              @relation(fields: [store_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "store_depots_ibfk_1")
  depots                   depots?              @relation(fields: [depot_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "store_depots_ibfk_2")

  @@index([depot_id], map: "depot_id")
  @@index([store_id], map: "store_id")
}

model stores {
  id             Int            @id @default(autoincrement())
  owner_id       Int?
  name           String?        @unique(map: "name") @db.VarChar(255)
  description    String?        @db.VarChar(255)
  slogan         String?        @db.VarChar(255)
  address        String?        @db.VarChar(255)
  seller_user_id Int?
  created_at     DateTime       @default(now()) @db.Timestamp(0)
  store_depots   store_depots[]
  users          users?         @relation(fields: [owner_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "stores_ibfk_1")

  @@index([owner_id], map: "owner_id")
}

model users {
  id               Int          @id @default(autoincrement())
  username         String       @unique(map: "username") @db.VarChar(255)
  role_id          Int?
  name             String?      @db.VarChar(255)
  mail             String       @unique(map: "mail") @db.VarChar(255)
  phone            String?      @unique(map: "phone") @db.VarChar(255)
  is_active        Boolean?     @default(true)
  is_verified      Boolean?     @default(false)
  work_for_user_id Int?
  created_at       DateTime     @default(now()) @db.Timestamp(0)
  stores           stores[]
  roles            roles?       @relation(fields: [role_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "users_ibfk_1")
  warehouses       warehouses[]

  @@index([role_id], map: "role_id")
}

model warehouses {
  id          Int      @id @default(autoincrement())
  owner_id    Int?
  name        String?  @db.VarChar(255)
  description String?  @db.VarChar(255)
  address     String?  @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(0)
  depots      depots[]
  users       users?   @relation(fields: [owner_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "warehouses_ibfk_1")

  @@index([owner_id], map: "owner_id")
}
