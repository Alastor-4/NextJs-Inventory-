generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model characteristics {
  id         Int       @id @default(autoincrement())
  product_id Int?
  name       String?   @db.VarChar(255)
  value      String?   @db.VarChar(255)
  created_at DateTime  @default(now()) @db.Timestamp(0)
  products   products? @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "characteristics_ibfk_1")

  @@index([product_id], map: "characteristic_product_id")
}

model images {
  id         Int       @id @default(autoincrement())
  product_id Int?
  created_at DateTime  @default(now()) @db.Timestamp(0)
  fileKey    String?   @db.VarChar(255)
  fileUrl    String?   @db.VarChar(255)
  products   products? @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "images_ibfk_1")

  @@index([product_id], map: "image_product_id")
}

model departments {
  id          Int        @id @default(autoincrement())
  name        String?    @db.VarChar(255)
  description String?    @db.VarChar(255)
  created_at  DateTime?  @default(now()) @db.Timestamp(0)
  products    products[]
  users       users?     @relation("departments_user", fields: [usersId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "department_user_FK")
  usersId     Int?
}

model depots {
  id                            Int            @id @default(autoincrement())
  product_id                    Int?
  warehouse_id                  Int?
  product_total_units           Int?
  product_total_remaining_units Int?
  created_at                    DateTime       @default(now()) @db.Timestamp(0)
  warehouses                    warehouses?    @relation(fields: [warehouse_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "depots_ibfk_1")
  products                      products?      @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "depots_ibfk_2")
  store_depots                  store_depots[]

  @@unique([product_id, warehouse_id])
  @@index([warehouse_id], map: "warehouse_id")
  @@index([product_id], map: "product_id")
}

model products {
  id              Int               @id @default(autoincrement())
  department_id   Int?
  owner_id        Int?
  name            String?           @db.VarChar(255)
  description     String?           @db.VarChar(255)
  buy_price       Float?
  is_approved     Boolean           @default(false)
  created_by_id   Int
  created_at      DateTime          @default(now()) @db.Timestamp(0)
  characteristics characteristics[]
  depots          depots[]
  images          images[]
  departments     departments?      @relation(fields: [department_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "products_ibfk_1")
  created_by_user users             @relation("created_by_user", fields: [created_by_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "product_user_FK")

  @@index([department_id], map: "department_id")
}

model product_store_transfers {
  id                         Int           @id @default(autoincrement())
  store_depot_id             Int?
  units_transferred_quantity Int?
  from_store_accepted        Boolean?      @default(false)
  to_store_id                Int?
  to_store_accepted          Boolean?      @default(false)
  transfer_notes             String?       @db.Text
  transfer_cancelled         Boolean?      @default(false)
  created_at                 DateTime      @default(now()) @db.Timestamp(0)
  store_depots               store_depots? @relation(fields: [store_depot_id], references: [id])
  stores                     stores?       @relation(fields: [to_store_id], references: [id])

  @@index([store_depot_id], map: "product_store_transfers_store_depot_fkey")
  @@index([to_store_id], map: "product_store_transfers_store_fkey")
}

model store_depot_transfers {
  id                         Int           @id @default(autoincrement())
  store_depot_id             Int?
  units_transferred_quantity Int?
  transfer_direction         String?       @db.VarChar(255)
  created_by_id              Int
  created_at                 DateTime      @default(now()) @db.Timestamp(0)
  store_depots               store_depots? @relation(fields: [store_depot_id], references: [id])
  created_by_user            users         @relation("created_by_user", fields: [created_by_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "store_depot_transfer_user_FK")

  @@index([store_depot_id], map: "store_depot_transfers_store_depot_fkey")
}

model roles {
  id          Int      @id @default(autoincrement())
  name        String?  @unique(map: "role_name") @db.VarChar(255)
  description String?  @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(0)
  users       users[]
}

model store_depots {
  id                        Int                       @id @default(autoincrement())
  store_id                  Int?
  depot_id                  Int?
  product_units             Int?
  product_remaining_units   Int?
  seller_profit_percentage  Float?                    @db.Real
  created_at                DateTime                  @default(now()) @db.Timestamp(0)
  is_active                 Boolean?                  @default(false)
  sell_price                Decimal?                  @default(0.00) @db.Decimal(10, 2)
  sell_price_unit           String?                   @default("CUP") @db.VarChar(100)
  seller_profit_quantity    Float?                    @db.Real
  price_discount_percentage Float?                    @db.Real
  price_discount_quantity   Float?                    @db.Real
  discount_description      String?
  seller_profit_unit        String?                   @db.VarChar(255)
  product_offers            product_offers[]
  product_store_transfers   product_store_transfers[]
  reservation_products      reservation_products[]
  sell_products             sell_products[]
  store_collection_depots   store_collection_depots[]
  store_depot_transfers     store_depot_transfers[]
  stores                    stores?                   @relation(fields: [store_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "store_depots_ibfk_1")
  depots                    depots?                   @relation(fields: [depot_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "store_depots_ibfk_2")

  @@unique([store_id, depot_id])
  @@index([depot_id], map: "depot_id")
  @@index([store_id], map: "store_id")
}

model stores {
  id                             Int                       @id @default(autoincrement())
  owner_id                       Int?
  name                           String?                   @unique(map: "name") @db.VarChar(255)
  description                    String?                   @db.VarChar(255)
  slogan                         String?                   @db.VarChar(255)
  address                        String?                   @db.VarChar(255)
  seller_user_id                 Int?
  created_at                     DateTime                  @default(now()) @db.Timestamp(0)
  auto_open_time                 Boolean?                  @default(true)
  auto_reservation_time          Boolean?                  @default(true)
  fixed_seller_profit_percentage Float?                    @db.Real
  online_catalog                 Boolean?                  @default(false)
  online_reservation             Boolean?                  @default(false)
  fixed_seller_profit_quantity   Float?                    @db.Real
  fixed_seller_profit_unit       String?                   @db.VarChar(255)
  product_store_transfers        product_store_transfers[]
  store_collections              store_collections[]
  store_depots                   store_depots[]
  store_open_days                store_open_days[]
  store_reservation_days         store_reservation_days[]
  seller_user                    users?                    @relation("seller_user", fields: [seller_user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "store_seller_FK")
  owner_user                     users?                    @relation("owner_user", fields: [owner_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "store_owner_FK")

  @@index([owner_id], map: "store_owner_id")
  @@index([seller_user_id], map: "stores_FK")
}

model users {
  id                    Int                     @id @default(autoincrement())
  username              String                  @unique(map: "username") @db.VarChar(255)
  password_hash         String?                 @db.VarChar(255)
  role_id               Int?
  name                  String?                 @db.VarChar(255)
  mail                  String                  @unique(map: "mail") @db.VarChar(255)
  phone                 String?                 @unique(map: "phone") @db.VarChar(255)
  is_active             Boolean?                @default(true)
  is_verified           Boolean?                @default(false)
  picture               String?                 @db.VarChar(255)
  work_for_user_id      Int?
  created_at            DateTime                @default(now()) @db.Timestamp(0)
  reservations          reservations[]
  sells                 sells[]
  user_seller_stores    stores[]                @relation("seller_user")
  user_owner_stores     stores[]                @relation("owner_user")
  roles                 roles?                  @relation(fields: [role_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "users_ibfk_1")
  warehouses            warehouses[]
  departments           departments[]           @relation("departments_user")
  store_depot_transfers store_depot_transfers[] @relation("created_by_user")
  product_created_user  products[]              @relation("created_by_user")

  @@index([role_id], map: "role_id")
}

model warehouses {
  id          Int      @id @default(autoincrement())
  owner_id    Int?
  name        String?  @db.VarChar(255)
  description String?  @db.VarChar(255)
  address     String?  @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(0)
  depots      depots[]
  users       users?   @relation(fields: [owner_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "warehouses_ibfk_1")

  @@index([owner_id], map: "owner_id")
}

model store_open_days {
  id              Int      @id @default(autoincrement())
  week_day_number Int      @db.SmallInt
  day_start_time  DateTime @db.Time(0)
  day_end_time    DateTime @db.Time(0)
  store_id        Int
  stores          stores   @relation(fields: [store_id], references: [id], onUpdate: Restrict, map: "store_open_days_store_FK")

  @@index([store_id], map: "store_open_days_FK")
}

model store_reservation_days {
  id              Int      @id @default(autoincrement())
  week_day_number Int      @db.SmallInt
  day_start_time  DateTime @db.Time(0)
  day_end_time    DateTime @db.Time(0)
  store_id        Int
  stores          stores   @relation(fields: [store_id], references: [id], onUpdate: Restrict, map: "store_reservation_days_store_FK")

  @@index([store_id], map: "store_reservation_days_FK")
}

model store_collection_depots {
  id                  Int               @id @default(autoincrement())
  store_collection_id Int
  store_depot_id      Int
  created_at          DateTime?         @default(now()) @db.Timestamp(0)
  store_collections   store_collections @relation(fields: [store_collection_id], references: [id], onUpdate: Restrict, map: "store_collection_depot_store_collection_FK")
  store_depots        store_depots      @relation(fields: [store_depot_id], references: [id], onUpdate: Restrict, map: "store_collection_depot_store_depot")

  @@index([store_collection_id], map: "store_collection_depot_FK")
  @@index([store_depot_id], map: "store_collection_depot_FK_1")
}

model store_collections {
  id                      Int                       @id @default(autoincrement())
  store_id                Int
  name                    String                    @db.VarChar(100)
  description             String?                   @db.VarChar(100)
  created_at              DateTime?                 @default(now()) @db.Timestamp(0)
  is_active               Boolean?                  @default(false)
  store_collection_depots store_collection_depots[]
  stores                  stores                    @relation(fields: [store_id], references: [id], onUpdate: Restrict, map: "store_collections_store_collection_depot_FK")

  @@index([store_id], map: "store_collections_FK")
}

model reservation_messages {
  id                     Int          @id @default(autoincrement())
  sender                 String       @db.VarChar(100)
  message                String       @db.Text
  was_read               Boolean?     @default(false)
  product_reservation_id Int
  created_at             DateTime?    @default(now()) @db.Timestamp(0)
  products_reservation   reservations @relation(fields: [product_reservation_id], references: [id], onUpdate: Restrict, map: "reservation_messages_products_reservation_FK")

  @@index([product_reservation_id], map: "reservation_messages_FK")
}

model reservation_status {
  id           Int            @id @default(autoincrement())
  code         Int            @db.SmallInt
  name         String         @db.VarChar(100)
  description  String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(0)
  reservations reservations[]
}

model payment_methods {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  description String?  @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(0)
}

model payment_units {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  description String?  @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(0)
}

model product_offers {
  id                     Int          @id @default(autoincrement())
  compare_units_quantity Int
  compare_function       String       @db.VarChar(100)
  price_per_unit         Float
  store_depot_id         Int
  is_active              Boolean?     @default(true)
  created_at             DateTime     @default(now()) @db.Timestamp(0)
  store_depots           store_depots @relation(fields: [store_depot_id], references: [id], onUpdate: Restrict, map: "product_offers_store_depots_FK")

  @@index([store_depot_id], map: "NewTable_FK")
}

model reservation_products {
  id               Int          @id @default(autoincrement())
  reservation_id   Int
  store_depot_id   Int
  units_quantity   Int
  price            Float
  applied_offer    Json?        @db.Json
  applied_discount Json?        @db.Json
  created_at       DateTime     @default(now()) @db.Timestamp(0)
  reservations     reservations @relation(fields: [reservation_id], references: [id], onUpdate: Restrict, map: "reservation_products_reservations_FK")
  store_depots     store_depots @relation(fields: [store_depot_id], references: [id], onUpdate: Restrict, map: "reservation_products_store_depots_FK")

  @@index([reservation_id], map: "reservation_products_reservation_id_FK")
  @@index([store_depot_id], map: "reservation_products_store_depot_id_FK")
}

model reservations {
  id                   Int                    @id @default(autoincrement())
  payment_method       String?                @db.VarChar(255)
  created_at           DateTime               @default(now()) @db.Timestamp(0)
  requesting_user_id   Int
  request_delivery     Boolean                @default(false)
  delivery_notes       String?                @db.Text
  status_description   String?                @db.Text
  status_id            Int
  total_price          Float
  reservation_messages reservation_messages[]
  reservation_products reservation_products[]
  reservation_status   reservation_status     @relation(fields: [status_id], references: [id], onUpdate: Restrict, map: "reservation_reservation_status_FK")
  users                users                  @relation(fields: [requesting_user_id], references: [id], onUpdate: Restrict, map: "reservation_user_FK")
  sells                sells[]

  @@index([status_id], map: "products_reservation_FK")
  @@index([requesting_user_id], map: "products_reservation_user_FK")
}

model sell_products {
  id             Int          @id @default(autoincrement())
  sell_id        Int
  store_depot_id Int
  units_quantity Int
  price          Float
  created_at     DateTime     @default(now()) @db.Timestamp(0)
  sells          sells        @relation(fields: [sell_id], references: [id], onUpdate: Restrict, map: "sell_products_FK")
  store_depots   store_depots @relation(fields: [store_depot_id], references: [id], onUpdate: Restrict, map: "sell_products_FK_1")

  @@index([sell_id], map: "reservation_products_FK")
  @@index([store_depot_id], map: "reservation_products_FK_1")
}

model sells {
  id                      Int             @id @default(autoincrement())
  total_price             Float?
  payment_method          String?         @db.VarChar(255)
  units_returned_quantity Int?
  created_at              DateTime        @default(now()) @db.Timestamp(0)
  returned_at             DateTime?       @db.Timestamp(0)
  returned_reason         String?         @db.Text
  from_reservation_id     Int?
  requesting_user_id      Int?
  sell_products           sell_products[]
  reservations            reservations?   @relation(fields: [from_reservation_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "sells_reservations_FK")
  users                   users?          @relation(fields: [requesting_user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "sells_users_FK")

  @@index([from_reservation_id], map: "products_sell_FK")
  @@index([requesting_user_id], map: "sells_FK")
}
